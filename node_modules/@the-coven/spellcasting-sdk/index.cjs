"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// libs/spellcasting-sdk/src/index.ts
var src_exports = {};
__export(src_exports, {
  Spell: () => Spell,
  SpellCastingSDK: () => SpellCastingSDK,
  SpellType: () => SpellType,
  spellCastingSDK: () => spellCastingSDK
});
module.exports = __toCommonJS(src_exports);

// libs/shared/util-interface/src/lib/util-interface.ts
var SpellType = /* @__PURE__ */ ((SpellType3) => {
  SpellType3["Enchantment"] = "Enchantment";
  SpellType3["Illusion"] = "Illusion";
  SpellType3["Conjuration"] = "Conjuration";
  SpellType3["Divination"] = "Divination";
  SpellType3["Abjuration"] = "Abjuration";
  SpellType3["Transmutation"] = "Transmutation";
  return SpellType3;
})(SpellType || {});

// libs/shared/util-interface/src/lib/Spell.ts
var Spell = class _Spell {
  constructor(name, type, ingredients = [], incantations = []) {
    this._ingredients = ingredients;
    this._incantations = incantations;
    this._name = name;
    this._type = type;
  }
  static fromRecipe(recipe) {
    return new _Spell(
      recipe.name,
      recipe.type,
      recipe.ingredients,
      recipe.incantations
    );
  }
  get name() {
    return this._name;
  }
  get type() {
    return this._type;
  }
  get ingredients() {
    return [...this._ingredients];
  }
  get incantations() {
    return [...this._incantations];
  }
  addIngredient(ingredient) {
    this._ingredients.push(ingredient);
  }
  addIncantation(incantation) {
    this._incantations.push(incantation);
  }
  removeIngredient(ingredient) {
    this._ingredients = this._ingredients.filter((i) => i !== ingredient);
  }
  removeIncantation(incantation) {
    this._incantations = this._incantations.filter((i) => i !== incantation);
  }
};

// libs/spellcasting-sdk/src/lib/spellcasting-sdk.ts
var SpellCastingSDK = class {
  constructor(baseUrl = "") {
    this.baseUrl = baseUrl;
  }
  async getAllIngedients() {
    const response = await fetch(`${this.baseUrl}/api/ingredients`);
    if (!response.ok) {
      throw new Error("Failed to fetch ingredients");
    }
    return await response.json();
  }
  async getAllIncantations() {
    const response = await fetch(`${this.baseUrl}/api/incantations`);
    if (!response.ok) {
      throw new Error("Failed to fetch incantations");
    }
    return await response.json();
  }
  async getAllRecipes() {
    const response = await fetch(`${this.baseUrl}/api/recipes`);
    if (!response.ok) {
      throw new Error("Failed to fetch recipes");
    }
    return await response.json();
  }
  async getRecipe(id) {
    const response = await fetch(`${this.baseUrl}/api/recipes/${id}`);
    if (!response.ok) {
      throw new Error("Failed to fetch recipe");
    }
    return await response.json();
  }
  async castSpell(spell, passphrase) {
    const response = await fetch(`${this.baseUrl}/api/cast-spell`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        spell: {
          name: spell.name,
          type: spell.type,
          ingredients: spell.ingredients,
          incantations: spell.incantations
        },
        passphrase
      })
    });
    if (!response.ok) {
      throw new Error("Spell casting failed");
    }
    const result = await response.json();
    return result.message;
  }
  createSpell(name, type, ingredients, incantations) {
    return new Spell(name, type, ingredients, incantations);
  }
  createSpellFromRecipe(recipe) {
    return Spell.fromRecipe(recipe);
  }
};
var spellCastingSDK = new SpellCastingSDK();
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Spell,
  SpellCastingSDK,
  SpellType,
  spellCastingSDK
});
